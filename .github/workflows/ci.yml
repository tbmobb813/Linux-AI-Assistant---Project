name: CI

on:
  push:
    branches:
      - main
      - master
      - chore/**
      - fix/**
      - feat/**
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  checks:
    name: TypeScript + Rust checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Node / Frontend ----------
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'           # use '20' if your project requires LTS 20
          cache: 'npm'

      - name: Detect frontend directory
        id: fe
        shell: bash
        run: |
          if [ -f "package.json" ]; then
            echo "dir=." >> $GITHUB_OUTPUT
          elif [ -d "linux-ai-assistant" ] && [ -f "linux-ai-assistant/package.json" ]; then
            echo "dir=linux-ai-assistant" >> $GITHUB_OUTPUT
          else
            echo "dir=" >> $GITHUB_OUTPUT
          fi

      - name: Install frontend dependencies
        if: ${{ steps.fe.outputs.dir != '' }}
        working-directory: ${{ steps.fe.outputs.dir }}
        run: npm ci

      - name: Prettier check
        if: ${{ steps.fe.outputs.dir != '' }}
        working-directory: ${{ steps.fe.outputs.dir }}
        run: |
          npx prettier --version >/dev/null 2>&1 || npm i -D prettier
          npx prettier --check .

      - name: TypeScript typecheck
        if: ${{ steps.fe.outputs.dir != '' && hashFiles(format('{0}/tsconfig.json', steps.fe.outputs.dir)) != '' }}
        working-directory: ${{ steps.fe.outputs.dir }}
        run: |
          npx typescript --version >/dev/null 2>&1 || npm i -D typescript
          npx tsc --noEmit

      - name: Run frontend tests (coverage)
        if: ${{ steps.fe.outputs.dir != '' }}
        working-directory: ${{ steps.fe.outputs.dir }}
        run: |
          npm ci
          npm run test:coverage

      - name: Upload frontend coverage
        if: ${{ steps.fe.outputs.dir != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: ${{ steps.fe.outputs.dir }}/coverage

      # ---------- Rust / Tauri ----------
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt, clippy
          override: true

      - name: Cache Rust builds
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            src-tauri
            linux-ai-assistant/src-tauri

      - name: Detect Tauri directory
        id: tauri
        shell: bash
        run: |
          if [ -f "src-tauri/Cargo.toml" ]; then
            echo "dir=src-tauri" >> $GITHUB_OUTPUT
          elif [ -f "linux-ai-assistant/src-tauri/Cargo.toml" ]; then
            echo "dir=linux-ai-assistant/src-tauri" >> $GITHUB_OUTPUT
          else
            echo "dir=" >> $GITHUB_OUTPUT
          fi

      - name: Cargo fmt (check)
        if: ${{ steps.tauri.outputs.dir != '' }}
        working-directory: ${{ steps.tauri.outputs.dir }}
        run: cargo fmt -- --check

      - name: Cargo clippy (deny warnings)
        if: ${{ steps.tauri.outputs.dir != '' }}
        working-directory: ${{ steps.tauri.outputs.dir }}
        run: cargo clippy --workspace --all-targets -- -D warnings

      - name: Cargo check
        if: ${{ steps.tauri.outputs.dir != '' }}
        working-directory: ${{ steps.tauri.outputs.dir }}
        run: cargo check --workspace --all-targets
